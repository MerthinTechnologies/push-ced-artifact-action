"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const firebase = require("firebase/app");
const firebase_service_1 = require("./firebase.service");
const security_service_1 = require("./security.service");
const organization_service_1 = require("./organization.service");
class ArtifactsService {
    constructor(token) {
        this._firebaseService = new firebase_service_1.FirebaseService();
        this._securityService = new security_service_1.SecurityService(token);
        this._organizationService = new organization_service_1.OrganizationService(token);
    }
    async initialize(projectId) {
        const firebaseToken = await this._securityService.getFirebaseToken(projectId);
        await this._firebaseService.login(firebaseToken);
    }
    async upload(projectId, environment, subsystemId, versionId, fileName, progressCallback, completionCallback) {
        const organization = await this._organizationService.getOrganization();
        this._upload(organization, projectId, environment, subsystemId, versionId, fileName, progressCallback, completionCallback);
    }
    _upload(organization, projectId, environment, subsystemId, versionId, fileName, progressCallback, completionCallback) {
        const storage = firebase.storage();
        const buffer = fs.readFileSync(fileName);
        const uploadTask = storage.ref()
            .child(organization)
            .child(projectId)
            .child(environment)
            .child(subsystemId)
            .child(versionId)
            .child('artifact.zip')
            .put(buffer);
        uploadTask.on('state_changed', snapshot => {
            var progress = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100);
            if (progressCallback) {
                progressCallback(progress);
            }
        }, (error) => {
            console.error(error);
            process.exit(1);
        }, async () => {
            if (completionCallback) {
                const downloadURL = await uploadTask.snapshot.ref.getDownloadURL();
                completionCallback(downloadURL);
            }
        });
        return uploadTask;
    }
}
exports.ArtifactsService = ArtifactsService;
//# sourceMappingURL=artifacts.service.js.map