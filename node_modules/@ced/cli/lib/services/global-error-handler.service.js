"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const fs = require("fs");
const serialize_error_1 = require("serialize-error");
const not_logged_error_1 = require("../errors/not-logged-error");
const no_project_config_error_1 = require("../errors/no-project-config-error");
const invalid_project_config_error_1 = require("../errors/invalid-project-config-error");
class GlobalErrorHandler {
    static init() {
        process.on('unhandledRejection', error => this._onUnhandledRejection(error));
        process.on('uncaughtException', error => this._onUncaughtException(error));
    }
    static _onUnhandledRejection(error) {
        this._handleError(error);
    }
    static _onUncaughtException(error) {
        this._handleError(error);
    }
    static _handleError(error) {
        this._logErrorToFile(error);
        if (error instanceof not_logged_error_1.NotLoggedError) {
            console.log(chalk.red('Error: ') + `Your not logged in. Use ${chalk.green('login')} command.`);
            console.log();
            process.exit(1);
            return;
        }
        if (error instanceof no_project_config_error_1.NoProjectConfigError) {
            console.log(chalk.red('Error: ') + `Not in a CED project folder (ced.json not found). Use ${chalk.green('init')} command.`);
            console.log();
            process.exit(1);
            return;
        }
        if (error instanceof invalid_project_config_error_1.InvalidProjectConfigError) {
            console.log(chalk.red('Error: ') + `Invalid project config in ced.json. ${error.message}`);
            console.log();
            process.exit(1);
            return;
        }
        if (error.isAxiosError && error.response && error.response.data && error.response.data.message) {
            console.log(chalk.red('Error: ') + error.response.data.message);
            console.log();
            process.exit(1);
            return;
        }
        console.log(chalk.red('Error: ') + error.message);
        console.log();
        process.exit(1);
    }
    static _logErrorToFile(error) {
        try {
            let data = error.stack;
            data += "\r\n\r\nComplete error data:\r\n";
            const errorData = serialize_error_1.serializeError(error);
            data += JSON.stringify(errorData, null, 2);
            fs.writeFileSync('ced.log', data);
        }
        catch (_a) { }
    }
}
exports.GlobalErrorHandler = GlobalErrorHandler;
//# sourceMappingURL=global-error-handler.service.js.map