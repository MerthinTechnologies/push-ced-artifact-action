"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const json_file_config_service_1 = require("./json-file-config.service");
const no_project_config_error_1 = require("../errors/no-project-config-error");
const invalid_project_config_error_1 = require("../errors/invalid-project-config-error");
const CONTEXT_CONFIG_FILE = 'ced.json';
class ProjectDirectoryConfigService {
    constructor() {
        this._configService = new json_file_config_service_1.JsonFileConfigService();
    }
    get() {
        if (!this._configService.exists(CONTEXT_CONFIG_FILE)) {
            throw new no_project_config_error_1.NoProjectConfigError();
        }
        let context;
        try {
            context = this._configService.readJson(CONTEXT_CONFIG_FILE);
        }
        catch (error) {
            throw new invalid_project_config_error_1.InvalidProjectConfigError(error.message);
        }
        if (!context) {
            throw new invalid_project_config_error_1.InvalidProjectConfigError('Context is not defined');
        }
        if (!context.projectId) {
            throw new invalid_project_config_error_1.InvalidProjectConfigError('Project Id is not defined');
        }
        if (!context.subsystemId) {
            throw new invalid_project_config_error_1.InvalidProjectConfigError('Subsystem Id is not defined');
        }
        if (!context.defaultEnvironment) {
            throw new invalid_project_config_error_1.InvalidProjectConfigError('Default environment is not defined');
        }
        if (!context.artifacts) {
            throw new invalid_project_config_error_1.InvalidProjectConfigError('Artifacts path is not defined');
        }
        return context;
    }
    set(config) {
        if (!config.artifacts) {
            config.artifacts = {};
        }
        if (Object.keys(config.artifacts).length === 0 ||
            !config.artifacts[config.defaultEnvironment] ||
            config.artifacts[config.defaultEnvironment].length === 0) {
            config.artifacts[config.defaultEnvironment] = ['.'];
        }
        this._configService.saveJson(CONTEXT_CONFIG_FILE, config);
    }
    async remove() {
        this._configService.remove(CONTEXT_CONFIG_FILE);
        this._configService.remove(path.join(this._configService.globalConfigRootFolder, CONTEXT_CONFIG_FILE));
    }
}
exports.ProjectDirectoryConfigService = ProjectDirectoryConfigService;
class ProjectDirectoryConfig {
}
exports.ProjectDirectoryConfig = ProjectDirectoryConfig;
//# sourceMappingURL=project-directory-config.service.js.map