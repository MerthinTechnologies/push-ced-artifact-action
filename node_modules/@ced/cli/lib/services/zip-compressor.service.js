"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AdmZip = require("adm-zip");
const path = require("path");
const os = require("os");
const fs = require("fs");
class ZipCompressorService {
    compress(folders) {
        const admZip = new AdmZip();
        const zipFile = this._getTempFile();
        for (const folder of folders) {
            console.log(`Compressing artifact path ${folder}`);
            const currentFolder = this._fixCurrentFolder(folder);
            if (!fs.lstatSync(folder).isDirectory()) {
                throw new Error(`Path is not a folder "${currentFolder}"`);
            }
            if (folders.length > 1) {
                admZip.addLocalFolder(currentFolder, currentFolder);
            }
            else {
                admZip.addLocalFolder(currentFolder);
            }
        }
        admZip.writeZip(zipFile);
        return zipFile;
    }
    _getTempFile() {
        const tmp = os.tmpdir();
        const file = 'ced' + new Date().getTime().toString();
        return path.join(tmp, file);
    }
    // AdmZip shows a bug processing './' 
    _fixCurrentFolder(path) {
        return path === '.' || path === './'
            ? process.cwd()
            : path;
    }
}
exports.ZipCompressorService = ZipCompressorService;
//# sourceMappingURL=zip-compressor.service.js.map