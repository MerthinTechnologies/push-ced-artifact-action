"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios = require("axios");
const config_1 = require("../config/config");
const open = require("open");
const not_logged_error_1 = require("../errors/not-logged-error");
const auth_config_service_1 = require("./auth-config.service");
class AuthService {
    constructor() {
        this._configService = new auth_config_service_1.AuthConfigService();
    }
    async startLogin() {
        const requestToken = new Date().getTime().toString();
        open(`${config_1.config.portalUrl}/cli-login?request-token=${requestToken}`);
        return requestToken;
    }
    waitForToken(requestToken) {
        return new Promise(async (resolve, reject) => {
            let token = '';
            do {
                token = await this._getToken(requestToken);
                if (!token) {
                    await this._sleep(1000);
                }
            } while (!token);
            resolve(token);
        });
    }
    _sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }
    async logout() {
        const tokens = this.getTokens();
        if (tokens) {
            this._configService.remove();
            const url = `${config_1.config.serverBaseUrl}/security/discard-cli-token`;
            await axios.default.delete(url, {
                headers: {
                    "cli-token": tokens.token,
                }
            });
        }
    }
    setTokens(requestToken, token) {
        this._configService.set({
            token,
            requestToken
        });
    }
    getTokens() {
        return this._configService.get();
    }
    getTokenOrThrow(defaultToken) {
        if (defaultToken) {
            return defaultToken;
        }
        else {
            const tokens = this.getTokens();
            if (tokens) {
                return tokens.token;
            }
        }
        throw new not_logged_error_1.NotLoggedError();
    }
    async _getToken(requestToken) {
        try {
            const url = `${config_1.config.serverBaseUrl}/security/claim-cli-token?request-token=${requestToken}`;
            const response = await axios.default.get(url);
            return response.data.token;
        }
        catch (e) {
            return '';
        }
    }
}
exports.AuthService = AuthService;
//# sourceMappingURL=auth.service.js.map