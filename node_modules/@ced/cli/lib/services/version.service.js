"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios = require("axios");
const config_1 = require("../config/config");
const auth_service_1 = require("./auth.service");
class VersionService {
    constructor(_token) {
        this._token = _token;
    }
    async getByName(name, projectId, environment, subsystemId) {
        const authService = new auth_service_1.AuthService();
        const token = authService.getTokenOrThrow(this._token);
        const url = `${config_1.config.serverBaseUrl}/projects/${projectId}/environments/${environment}/subsystems/${subsystemId}/versions/get-by-name?name=${name}`;
        const response = await axios.default.get(url, {
            headers: {
                "cli-token": token,
            }
        });
        return response.data;
    }
    async create(projectId, environment, subsystemId) {
        const authService = new auth_service_1.AuthService();
        const token = authService.getTokenOrThrow(this._token);
        const url = `${config_1.config.serverBaseUrl}/projects/${projectId}/environments/${environment}/subsystems/${subsystemId}/versions/`;
        const response = await axios.default.post(url, {}, {
            headers: {
                "cli-token": token,
            }
        });
        return response.data;
    }
    async publish(projectId, environment, subsystemId, versionId) {
        const authService = new auth_service_1.AuthService();
        const token = authService.getTokenOrThrow(this._token);
        const url = `${config_1.config.serverBaseUrl}/projects/${projectId}/environments/${environment}/subsystems/${subsystemId}/versions/${versionId}/publish`;
        await axios.default.post(url, {}, {
            headers: {
                "cli-token": token,
            }
        });
    }
}
exports.VersionService = VersionService;
//# sourceMappingURL=version.service.js.map