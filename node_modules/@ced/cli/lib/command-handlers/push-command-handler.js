"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const cliProgress = require("cli-progress");
const version_service_1 = require("../services/version.service");
const artifacts_service_1 = require("../services/artifacts.service");
const zip_compressor_service_1 = require("../services/zip-compressor.service");
const project_directory_config_service_1 = require("../services/project-directory-config.service");
class PushCommandHandler {
    constructor(token) {
        this._configService = new project_directory_config_service_1.ProjectDirectoryConfigService();
        this._versionService = new version_service_1.VersionService(token);
        this._artifactsService = new artifacts_service_1.ArtifactsService(token);
        this._zipCompressorService = new zip_compressor_service_1.ZipCompressorService();
    }
    async run(environmentName, versionName, pushAsDraft) {
        const context = this._configService.get();
        const projectId = context.projectId;
        const environment = environmentName || context.defaultEnvironment;
        const subsystemId = context.subsystemId;
        const folders = context.artifacts[environment];
        if (!folders || folders.length === 0) {
            throw new Error(`No artifact folder declared in ced.json for environment "${environment}".`);
        }
        const zipFile = this._zipCompressorService.compress(folders);
        const size = this._getZipSize(zipFile);
        console.log(`Compressed artifacts size is ${size}Mb`);
        const version = versionName
            ? await this._getVersion(versionName, projectId, environment, subsystemId)
            : await this._createVersion(projectId, environment, subsystemId);
        await this._upload(projectId, environment, subsystemId, version.id, zipFile, async () => {
            fs.unlinkSync(zipFile);
            if (!pushAsDraft) {
                console.log('Publishing version');
                await this._versionService.publish(projectId, environment, subsystemId, version.id);
            }
            console.log('Done');
            console.log();
            process.exit();
        });
    }
    async _getVersion(versionName, projectId, environment, subsystemId) {
        const version = (await this._versionService.getByName(versionName, projectId, environment, subsystemId))[0];
        if (!version) {
            throw new Error(`Version ${versionName} not found.`);
        }
        return version;
    }
    async _createVersion(projectId, environment, subsystemId) {
        const version = await this._versionService.create(projectId, environment, subsystemId);
        console.log('Version created: ' + version.name);
        return version;
    }
    async _upload(projectId, environment, subsystemId, versionId, fileName, onDone) {
        const bar = new cliProgress.Bar({
            format: `{bar} Uploading {percentage}% | Remaining: {eta}s`
        }, cliProgress.Presets.shades_classic);
        bar.start(100, 0);
        await this._artifactsService.initialize(projectId);
        await this._artifactsService.upload(projectId, environment, subsystemId, versionId, fileName, (progress) => {
            bar.update(progress);
        }, () => {
            bar.stop();
            onDone();
        });
    }
    _getZipSize(zipFile) {
        const stats = fs.statSync(zipFile);
        const fileSizeInMegabytes = stats.size / 1000000.0;
        const rounded = Math.round((fileSizeInMegabytes + Number.EPSILON) * 100) / 100;
        return rounded;
    }
}
exports.PushCommandHandler = PushCommandHandler;
//# sourceMappingURL=push-command-handler.js.map