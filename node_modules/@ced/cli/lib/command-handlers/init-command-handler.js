"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const project_directory_config_service_1 = require("../services/project-directory-config.service");
const project_service_1 = require("../services/project.service");
const subsystem_service_1 = require("../services/subsystem.service");
const environment_service_1 = require("../services/environment.service");
const project_not_found_error_1 = require("../errors/project-not-found-error");
const environment_not_found_error_1 = require("../errors/environment-not-found-error");
const subsystem_not_found_error_1 = require("../errors/subsystem-not-found-error");
const prompt_service_1 = require("../services/prompt.service");
class InitCommandHandler {
    constructor(_token) {
        this._configService = new project_directory_config_service_1.ProjectDirectoryConfigService();
        this._projectService = new project_service_1.ProjectService(_token);
        this._subsystemService = new subsystem_service_1.SubsystemService(_token);
        this._environmentService = new environment_service_1.EnvironmentService(_token);
    }
    async run(projectId, defaultEnvironment, subsystemId) {
        const parameters = (projectId && defaultEnvironment && subsystemId)
            ? await this._getFromParameters(projectId, defaultEnvironment, subsystemId)
            : await this._getFromUserInput();
        this._configService.set(parameters);
        console.log('Project initialized');
        console.log();
    }
    async _getFromParameters(projectId, defaultEnvironment, subsystemId) {
        await this._checkProject(projectId);
        await this._checkEnvironment(projectId, defaultEnvironment);
        await this._checkSubsystem(projectId, defaultEnvironment, subsystemId);
        return {
            projectId,
            defaultEnvironment,
            subsystemId,
            artifacts: {}
        };
    }
    async _getFromUserInput() {
        const projectId = await prompt_service_1.PromptService.question('Project Id: ');
        await this._checkProject(projectId);
        const defaultEnvironment = await prompt_service_1.PromptService.question('Default envrironment: ');
        await this._checkEnvironment(projectId, defaultEnvironment);
        const subsystemId = await prompt_service_1.PromptService.question('Subsystem Id: ');
        await this._checkSubsystem(projectId, defaultEnvironment, subsystemId);
        return {
            projectId,
            defaultEnvironment,
            subsystemId,
            artifacts: {}
        };
    }
    async _checkProject(projectId) {
        process.stdout.write('Setting project ');
        let project;
        try {
            project = await this._projectService.getById(projectId);
            if (project) {
                console.log(chalk.cyan(project.name));
            }
        }
        catch (e) {
            if (!e.isAxiosError || !e.response || e.response.status !== 404) {
                throw e;
            }
        }
        if (!project) {
            throw new project_not_found_error_1.ProjectNotFoundError(projectId);
        }
    }
    async _checkEnvironment(projectId, defaultEnvironment) {
        process.stdout.write('Setting environment ');
        let environment;
        try {
            environment = await this._environmentService.get(projectId, defaultEnvironment);
            if (environment) {
                console.log(chalk.cyan(environment.name));
            }
        }
        catch (e) {
            if (!e.isAxiosError || !e.response || e.response.status !== 404) {
                throw e;
            }
        }
        if (!environment) {
            throw new environment_not_found_error_1.EnvironmentNotFoundError(projectId, defaultEnvironment);
        }
    }
    async _checkSubsystem(projectId, defaultEnvironment, subsystemId) {
        process.stdout.write('Setting subsystem ');
        let subsystem;
        try {
            subsystem = await this._subsystemService.getById(projectId, defaultEnvironment, subsystemId);
            if (subsystem) {
                console.log(chalk.cyan(subsystem.name));
            }
        }
        catch (e) {
            if (!e.isAxiosError || !e.response || e.response.status !== 404) {
                throw e;
            }
        }
        if (!subsystem) {
            throw new subsystem_not_found_error_1.SubsystemNotFoundError(projectId, defaultEnvironment, subsystemId);
        }
    }
}
exports.InitCommandHandler = InitCommandHandler;
//# sourceMappingURL=init-command-handler.js.map