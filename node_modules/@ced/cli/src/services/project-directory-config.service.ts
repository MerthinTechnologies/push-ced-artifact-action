import * as path from 'path';
import { JsonFileConfigService } from './json-file-config.service';
import { NoProjectConfigError } from '../errors/no-project-config-error';
import { InvalidProjectConfigError } from '../errors/invalid-project-config-error';

const CONTEXT_CONFIG_FILE = 'ced.json';

export class ProjectDirectoryConfigService {
  private _configService: JsonFileConfigService;

  public constructor() {
    this._configService = new JsonFileConfigService();
  }

  public get(): ProjectDirectoryConfig {
    if (!this._configService.exists(CONTEXT_CONFIG_FILE)) {
      throw new NoProjectConfigError();
    }
    let context: ProjectDirectoryConfig;
    try {
      context = <ProjectDirectoryConfig>this._configService.readJson<ProjectDirectoryConfig>(CONTEXT_CONFIG_FILE);
    } catch (error) {
      throw new InvalidProjectConfigError(error.message);
    }
    
    if (!context) {
      throw new InvalidProjectConfigError('Context is not defined');
    }
    if (!context.projectId) {
      throw new InvalidProjectConfigError('Project Id is not defined');
    }
    if (!context.subsystemId) {
      throw new InvalidProjectConfigError('Subsystem Id is not defined');
    }
    if (!context.defaultEnvironment) {
      throw new InvalidProjectConfigError('Default environment is not defined');
    }
    if (!context.artifacts) {
      throw new InvalidProjectConfigError('Artifacts path is not defined');
    }
    return context;
  }
  
  public set(config: ProjectDirectoryConfig): void {
    if (!config.artifacts) {
      config.artifacts = {};
    }
    if (Object.keys(config.artifacts).length === 0 ||
        !config.artifacts[config.defaultEnvironment] ||
        config.artifacts[config.defaultEnvironment].length === 0) {
      config.artifacts[config.defaultEnvironment] = ['.'];
    }
    this._configService.saveJson(CONTEXT_CONFIG_FILE, config);
  }

  public async remove() {
    this._configService.remove(CONTEXT_CONFIG_FILE);
    this._configService.remove(path.join(this._configService.globalConfigRootFolder, CONTEXT_CONFIG_FILE));
  }
}

export class ProjectDirectoryConfig {
  public projectId!: string;
  public subsystemId!: string;
  public defaultEnvironment!: string;
  public artifacts!: { [environment: string]: string[] };
}