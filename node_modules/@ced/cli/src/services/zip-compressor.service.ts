import * as AdmZip from 'adm-zip';
import * as path from 'path';
import * as os from 'os';
import * as fs from 'fs';

export class ZipCompressorService {

  public compress(folders: string[]): string {
    const admZip = new AdmZip();
    const zipFile = this._getTempFile();
    for (const folder of folders) {
      console.log(`Compressing artifact path ${folder}`);
      const currentFolder = this._fixCurrentFolder(folder);

      if (!fs.lstatSync(folder).isDirectory()) {
        throw new Error(`Path is not a folder "${currentFolder}"`);
      }

      if (folders.length > 1) {
        admZip.addLocalFolder(currentFolder, currentFolder);
      } else {
        admZip.addLocalFolder(currentFolder);
      }
    }
    admZip.writeZip(zipFile);
    return zipFile;
  }

  private _getTempFile() {
    const tmp = os.tmpdir();
    const file = 'ced' + new Date().getTime().toString();
    return path.join(tmp, file);
  }

  // AdmZip shows a bug processing './' 
  private _fixCurrentFolder(path: string) {
    return path === '.' || path === './'
      ? process.cwd()
      : path;
  }
}
