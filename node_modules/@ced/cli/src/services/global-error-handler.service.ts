import chalk = require("chalk");
import * as fs from "fs";
import { serializeError } from "serialize-error";
import { NotLoggedError } from "../errors/not-logged-error";
import { NoProjectConfigError } from "../errors/no-project-config-error";
import { InvalidProjectConfigError } from "../errors/invalid-project-config-error";

export class GlobalErrorHandler {
  public static init() {
    process.on('unhandledRejection', error => this._onUnhandledRejection(error));
    process.on('uncaughtException', error => this._onUncaughtException(error));
  }

  private static _onUnhandledRejection(error: any) {
    this._handleError(error);
  }

  private static _onUncaughtException(error: any) {
    this._handleError(error);
  }

  private static _handleError(error: any) {
    this._logErrorToFile(error);
    if (error instanceof NotLoggedError) {
      console.log(chalk.red('Error: ') + `Your not logged in. Use ${chalk.green('login')} command.`);
      console.log();
      process.exit(1);
      return;
    }

    if (error instanceof NoProjectConfigError) {
      console.log(chalk.red('Error: ') + `Not in a CED project folder (ced.json not found). Use ${chalk.green('init')} command.`);
      console.log();
      process.exit(1);
      return;
    }

    if (error instanceof InvalidProjectConfigError) {
      console.log(chalk.red('Error: ') + `Invalid project config in ced.json. ${error.message}`);
      console.log();
      process.exit(1);
      return;
    }
    
    if (error.isAxiosError && error.response && error.response.data && error.response.data.message) {
      console.log(chalk.red('Error: ') + error.response.data.message);
      console.log();
      process.exit(1);
      return;
    }

    console.log(chalk.red('Error: ') + error.message);
    console.log();
    process.exit(1);
  }

  private static _logErrorToFile(error: Error) {
    try {
      let data = error.stack;
      data += "\r\n\r\nComplete error data:\r\n"
      const errorData = serializeError(error);
      data += JSON.stringify(errorData, null, 2);      
      fs.writeFileSync('ced.log', data);
    } catch {}
  }
}