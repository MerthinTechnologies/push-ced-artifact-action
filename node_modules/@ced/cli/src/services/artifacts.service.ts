import * as fs from 'fs';
import * as firebase from 'firebase/app';
import { FirebaseService } from "./firebase.service";
import { SecurityService } from "./security.service";
import { OrganizationService } from './organization.service';

export class ArtifactsService {
  private _firebaseService: FirebaseService;  
  private _securityService: SecurityService;
  private _organizationService: OrganizationService;

  constructor(token?: string) {
    this._firebaseService = new FirebaseService();
    this._securityService = new SecurityService(token);
    this._organizationService = new OrganizationService(token);
  }

  public async initialize(projectId: string): Promise<void> {
    const firebaseToken = await this._securityService.getFirebaseToken(projectId);
    await this._firebaseService.login(firebaseToken);
  }

  public async upload(projectId: string, environment: string, subsystemId: string, versionId: string, fileName: string, 
      progressCallback?: (progress: number) => void | undefined, 
      completionCallback?: (downloadUrl: string) => void | undefined) {
    const organization = await this._organizationService.getOrganization();
    this._upload(organization, projectId, environment, subsystemId, versionId, fileName, 
      progressCallback, completionCallback);
  }

  private _upload(organization: string, 
    projectId: string, environment: string, subsystemId: string,
    versionId: string, fileName: string, 
    progressCallback?: (progress: number) => void | undefined, 
    completionCallback?: (downloadUrl: string) => void | undefined) {
    const storage = firebase.storage();
    const buffer = fs.readFileSync(fileName);
    const uploadTask = storage.ref()      
      .child(organization)
      .child(projectId)
      .child(environment)
      .child(subsystemId)
      .child(versionId)
      .child('artifact.zip')
      .put(buffer);

    uploadTask.on('state_changed', snapshot => {
      var progress = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100);
      if (progressCallback) {
        progressCallback(progress);
      }
    }, (error) => {
      console.error(error);
      process.exit(1);
    }, async () => {
      if (completionCallback) {
        const downloadURL = await uploadTask.snapshot.ref.getDownloadURL();
        completionCallback(downloadURL);
      }
    });
    return uploadTask;
  }
}
