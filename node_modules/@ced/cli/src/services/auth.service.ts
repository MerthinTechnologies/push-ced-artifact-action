import * as axios from 'axios';
import { config } from '../config/config';
import * as open from 'open';
import { NotLoggedError } from '../errors/not-logged-error';
import { AuthConfigService, AuthConfig } from './auth-config.service';

export class AuthService {
  private _configService: AuthConfigService;

  public constructor() {
    this._configService = new AuthConfigService();
  }

  public async startLogin(): Promise<string> {
    const requestToken = new Date().getTime().toString();
    open(`${config.portalUrl}/cli-login?request-token=${requestToken}`);
    return requestToken;
  }

  public waitForToken(requestToken: string): Promise<string> {
    return new Promise(async (resolve, reject) => {
      let token = '';
      do {
        token = await this._getToken(requestToken);
        if (!token) {
          await this._sleep(1000);
        }
      } while(!token)
      resolve(token);
    });
  }

  private _sleep(ms: number) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }   

  public async logout() {
    const tokens = this.getTokens();
    if (tokens) {
      this._configService.remove();
      const url = `${config.serverBaseUrl}/security/discard-cli-token`;
      await axios.default.delete(url, {
        headers: {
          "cli-token": tokens.token,
        }
      });
    }
  }

  public setTokens(requestToken: string, token: string): void {
    this._configService.set({
      token,
      requestToken
    });
  }

  public getTokens(): AuthConfig | undefined {
    return this._configService.get();
  }

  public getTokenOrThrow(defaultToken?: string): string {
    if (defaultToken) {
      return defaultToken;
    } else {
      const tokens = this.getTokens();
      
      if (tokens) {
        return tokens.token;
      } 
    }
    throw new NotLoggedError();
  }

  private async _getToken(requestToken: string): Promise<string> {
    try {
      const url = `${config.serverBaseUrl}/security/claim-cli-token?request-token=${requestToken}`;
      const response = await axios.default.get(url);
      return response.data.token;
    } catch(e) {
      return '';
    }
  }
}