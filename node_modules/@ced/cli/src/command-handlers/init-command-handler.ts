import chalk = require("chalk");
import { ProjectDirectoryConfigService, ProjectDirectoryConfig } from "../services/project-directory-config.service";
import { ProjectService } from "../services/project.service";
import { SubsystemService } from "../services/subsystem.service";
import { EnvironmentService } from "../services/environment.service";
import { ProjectNotFoundError } from "../errors/project-not-found-error";
import { EnvironmentNotFoundError } from "../errors/environment-not-found-error";
import { SubsystemNotFoundError } from "../errors/subsystem-not-found-error";
import { PromptService } from "../services/prompt.service";

export class InitCommandHandler {
  private _projectService: ProjectService;
  private _subsystemService: SubsystemService;
  private _environmentService: EnvironmentService;
  private _configService: ProjectDirectoryConfigService;

  public constructor(_token?: string) {
    this._configService = new ProjectDirectoryConfigService();
    this._projectService = new ProjectService(_token);
    this._subsystemService = new SubsystemService(_token);
    this._environmentService = new EnvironmentService(_token);
  }

  public async run(projectId: string, defaultEnvironment: string, subsystemId: string) { 
    const parameters = (projectId && defaultEnvironment && subsystemId) 
      ? await this._getFromParameters(projectId, defaultEnvironment, subsystemId)
      : await this._getFromUserInput();

    this._configService.set(parameters);
    console.log('Project initialized')
    console.log();
  }

  private async _getFromParameters(projectId: string, defaultEnvironment: string, subsystemId: string): Promise<ProjectDirectoryConfig> {
    await this._checkProject(projectId);
    await this._checkEnvironment(projectId, defaultEnvironment);
    await this._checkSubsystem(projectId, defaultEnvironment, subsystemId);

    return {
      projectId,
      defaultEnvironment,
      subsystemId,
      artifacts: {}
    };
  }

  private async _getFromUserInput(): Promise<ProjectDirectoryConfig> {
    const projectId = await PromptService.question('Project Id: ');
    await this._checkProject(projectId);

    const defaultEnvironment = await PromptService.question('Default envrironment: ');
    await this._checkEnvironment(projectId, defaultEnvironment);

    const subsystemId = await PromptService.question('Subsystem Id: ');
    await this._checkSubsystem(projectId, defaultEnvironment, subsystemId);

    return {
      projectId,
      defaultEnvironment,
      subsystemId,
      artifacts: {}
    };
  }

  private async _checkProject(projectId: string) {
    process.stdout.write('Setting project ');
    let project: any;
    try {
      project = await this._projectService.getById(projectId);
      if (project) {
        console.log(chalk.cyan(project.name));
      }
    } catch (e) {
      if (!e.isAxiosError || !e.response || e.response.status !== 404) {
        throw e;
      }
    }
    
    if (!project) {
      throw new ProjectNotFoundError(projectId);
    }
  }

  private async _checkEnvironment(projectId: string, defaultEnvironment: string) {
    process.stdout.write('Setting environment ');
    let environment: any;
    try {
      environment = await this._environmentService.get(projectId, defaultEnvironment);
      if (environment) {
        console.log(chalk.cyan(environment.name));
      }
    } catch(e) {
      if (!e.isAxiosError || !e.response || e.response.status !== 404) {
        throw e;
      }
    }
    
    if (!environment) {
      throw new EnvironmentNotFoundError(projectId, defaultEnvironment);
    }
  }

  private async _checkSubsystem(projectId: string, defaultEnvironment: string, subsystemId: string) {
    process.stdout.write('Setting subsystem ');
    let subsystem: any;
    try {
      subsystem = await this._subsystemService.getById(projectId, defaultEnvironment, subsystemId);
      if (subsystem) {
        console.log(chalk.cyan(subsystem.name));
      }
    } catch(e) {
      if (!e.isAxiosError || !e.response || e.response.status !== 404) {
        throw e;
      }
    }
    
    if (!subsystem) {
      throw new SubsystemNotFoundError(projectId, defaultEnvironment, subsystemId);
    }
  }
}