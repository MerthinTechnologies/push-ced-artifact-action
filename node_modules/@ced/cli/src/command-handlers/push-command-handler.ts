import * as fs from "fs";
import * as cliProgress from "cli-progress";
import { VersionService } from "../services/version.service";
import { ArtifactsService } from "../services/artifacts.service";
import { ZipCompressorService } from "../services/zip-compressor.service";
import { ProjectDirectoryConfigService } from "../services/project-directory-config.service";

export class PushCommandHandler {
  private _configService: ProjectDirectoryConfigService;
  private _versionService: VersionService;
  private _artifactsService: ArtifactsService;
  private _zipCompressorService: ZipCompressorService;

  public constructor(token?: string) {
    this._configService = new ProjectDirectoryConfigService();
    this._versionService = new VersionService(token);
    this._artifactsService = new ArtifactsService(token);
    this._zipCompressorService = new ZipCompressorService();
  }

  public async run(environmentName?: string, versionName?: string, pushAsDraft?: boolean) {
    const context = this._configService.get();
    const projectId = context.projectId;
    const environment = environmentName || context.defaultEnvironment;
    const subsystemId = context.subsystemId;
    const folders = context.artifacts[environment];

    if (!folders || folders.length === 0) {
      throw new Error(`No artifact folder declared in ced.json for environment "${environment}".`);
    }

    const zipFile = this._zipCompressorService.compress(folders);
    
    const size = this._getZipSize(zipFile);
    console.log(`Compressed artifacts size is ${size}Mb`);

    const version = versionName
      ? await this._getVersion(versionName, projectId, environment, subsystemId)
      : await this._createVersion(projectId, environment, subsystemId);

    await this._upload(projectId, environment, subsystemId, version.id, zipFile, async () => {
      fs.unlinkSync(zipFile);

      if (!pushAsDraft) {
        console.log('Publishing version');
        await this._versionService.publish(projectId, environment, subsystemId, version.id);
      } 

      console.log('Done');
      console.log();
      process.exit();
    });
  }

  private async _getVersion(versionName: string, projectId: string, environment: string, subsystemId: string) {
    const version = (await this._versionService.getByName(versionName, projectId, environment, subsystemId))[0];

    if (!version) {
      throw new Error(`Version ${versionName} not found.`);
    }
    return version;
  }

  private async _createVersion(projectId: string, environment: string, subsystemId: string) {
    const version = await this._versionService.create(projectId, environment, subsystemId);
    console.log('Version created: ' + version.name);
    return version;
  }

  private async _upload(projectId: string, environment: string, subsystemId: string, versionId: string, fileName: string, onDone: () => void) {
    const bar = new cliProgress.Bar({
      format: `{bar} Uploading {percentage}% | Remaining: {eta}s`
    }, cliProgress.Presets.shades_classic);
    bar.start(100, 0);
    await this._artifactsService.initialize(projectId);
    await this._artifactsService.upload(projectId, environment, subsystemId, versionId, fileName, (progress: number) => {
      bar.update(progress);
    }, () => {
      bar.stop();
      onDone();
    });
  }

  private _getZipSize(zipFile: string) {
    const stats = fs.statSync(zipFile);
    const fileSizeInMegabytes = stats.size / 1000000.0;
    const rounded = Math.round((fileSizeInMegabytes + Number.EPSILON) * 100) / 100
    return rounded;
  }
}